// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// التعدادات - Enums
enum Role {
  CLIENT
  PROVIDER
  ADMIN
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELED
  DISPUTE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED_CLIENT
  RESOLVED_PROVIDER
  RESOLVED_PARTIAL
  CANCELED
}

// إضافة تعداد NotificationType
enum NotificationType {
  REQUEST_CREATED
  OFFER_RECEIVED
  OFFER_ACCEPTED
  OFFER_REJECTED
  WORK_SUBMITTED
  WORK_APPROVED
  PAYMENT_RELEASED
  RATING_RECEIVED
  DISPUTE_OPENED
  DISPUTE_RESOLVED
  DISPUTE_REPLY
  DOCUMENT_VERIFIED
  DOCUMENT_REJECTED
  SYSTEM
}

// إضافة تعداد TransactionType و TransactionStatus
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  ESCROW_HOLD
  ESCROW_RELEASE
  ESCROW_REFUND
  PLATFORM_FEE
  DISPUTE_REFUND
  DISPUTE_RELEASE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

// النماذج - Models
model User {
  id         Int       @id @default(autoincrement())
  role       Role
  name       String
  email      String    @unique
  phone      String?   @unique
  password   String
  city       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // العلاقات
  requests         Request[]           @relation("ClientRequests")
  offers           Offer[]             @relation("ProviderOffers")
  messagesFrom     Message[]           @relation("SentMessages")
  messagesTo       Message[]           @relation("ReceivedMessages")
  ratingsFrom      Rating[]            @relation("GivenRatings")
  ratingsTo        Rating[]            @relation("ReceivedRatings")
  disputesClient   Dispute[]           @relation("ClientDisputes")
  disputesProvider Dispute[]           @relation("ProviderDisputes")
  disputeReplies   DisputeReply[]
  providerDocs     ProviderDoc[]
  notifications    Notification[]
  wallet           Wallet?
  transactions     Transaction[]
  withdrawalRequests WithdrawalRequest[]
}

model Service {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // العلاقات
  requests   Request[]
}

model Request {
  id           Int            @id @default(autoincrement())
  clientId     Int
  serviceId    Int
  description  String         @db.Text
  budget       Decimal?       @db.Decimal(10, 2)
  status       RequestStatus  @default(OPEN)
  escrowAmount Decimal?       @db.Decimal(10, 2)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // العلاقات
  client       User          @relation("ClientRequests", fields: [clientId], references: [id])
  service      Service       @relation(fields: [serviceId], references: [id])
  offers       Offer[]
  messages     Message[]
  dispute      Dispute?
  ratings      Rating[]
  transactions Transaction[]

  @@index([clientId])
  @@index([serviceId])
}

model Offer {
  id             Int          @id @default(autoincrement())
  requestId      Int
  providerId     Int
  proposedPrice  Decimal?     @db.Decimal(10, 2)
  finalPrice     Decimal?     @db.Decimal(10, 2)  // السعر النهائي بعد إضافة هامش الربح
  proposedDays   Int?
  status         OfferStatus  @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // العلاقات
  request      Request       @relation(fields: [requestId], references: [id])
  provider     User          @relation("ProviderOffers", fields: [providerId], references: [id])
  transactions Transaction[]

  @@index([requestId])
  @@index([providerId])
}

model Message {
  id          Int       @id @default(autoincrement())
  requestId   Int
  fromUserId  Int
  toUserId    Int
  content     String    @db.Text
  createdAt   DateTime  @default(now())

  // العلاقات
  request     Request   @relation(fields: [requestId], references: [id])
  fromUser    User      @relation("SentMessages", fields: [fromUserId], references: [id])
  toUser      User      @relation("ReceivedMessages", fields: [toUserId], references: [id])

  @@index([requestId])
  @@index([fromUserId])
  @@index([toUserId])
}

model Rating {
  id          Int       @id @default(autoincrement())
  fromUserId  Int
  toUserId    Int
  requestId   Int
  score       Int       // من 1 إلى 5
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())

  // العلاقات
  fromUser    User      @relation("GivenRatings", fields: [fromUserId], references: [id])
  toUser      User      @relation("ReceivedRatings", fields: [toUserId], references: [id])
  request     Request   @relation(fields: [requestId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([requestId])
}

model Dispute {
  id           Int            @id @default(autoincrement())
  requestId    Int            @unique
  clientId     Int
  providerId   Int
  reason       String         @db.Text
  status       DisputeStatus  @default(OPEN)
  resolution   String?        @db.Text
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // العلاقات
  request      Request        @relation(fields: [requestId], references: [id])
  client       User           @relation("ClientDisputes", fields: [clientId], references: [id])
  provider     User           @relation("ProviderDisputes", fields: [providerId], references: [id])
  replies      DisputeReply[]
  transactions Transaction[]

  @@index([clientId])
  @@index([providerId])
}

model DisputeReply {
  id          Int       @id @default(autoincrement())
  disputeId   Int
  userId      Int
  content     String    @db.Text
  attachments String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // العلاقات
  dispute     Dispute   @relation(fields: [disputeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([disputeId])
  @@index([userId])
}

model ProviderDoc {
  id         Int       @id @default(autoincrement())
  userId     Int
  docURL     String
  verified   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // العلاقات
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id          Int             @id @default(autoincrement())
  userId      Int
  type        NotificationType
  title       String
  message     String          @db.Text
  isRead      Boolean         @default(false)
  relatedId   Int?
  relatedType String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // العلاقات
  user        User            @relation(fields: [userId], references: [id])

  @@index([userId])
}

// إضافة نموذج المحفظة
model Wallet {
  id                Int           @id @default(autoincrement())
  userId            Int           @unique
  balance           Decimal       @default(0) @db.Decimal(10, 2)
  availableBalance  Decimal       @default(0) @db.Decimal(10, 2)
  currency          String        @default("IQD")
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // العلاقات
  user              User          @relation(fields: [userId], references: [id])
  transactions      Transaction[]

  @@index([userId])
}

// إضافة نموذج المعاملات المالية
model Transaction {
  id              Int               @id @default(autoincrement())
  userId          Int
  walletId        Int
  type            TransactionType
  amount          Decimal           @db.Decimal(10, 2)
  status          TransactionStatus @default(PENDING)
  reference       String?           // رقم مرجعي للمعاملة
  requestId       Int?
  offerId         Int?
  disputeId       Int?
  description     String?           @db.Text
  metadata        String?           @db.Text  // بيانات إضافية (JSON)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // العلاقات
  user            User              @relation(fields: [userId], references: [id])
  wallet          Wallet            @relation(fields: [walletId], references: [id])
  request         Request?          @relation(fields: [requestId], references: [id])
  offer           Offer?            @relation(fields: [offerId], references: [id])
  dispute         Dispute?          @relation(fields: [disputeId], references: [id])
  withdrawalRequest WithdrawalRequest?
  
  @@index([userId])
  @@index([walletId])
  @@index([requestId])
  @@index([offerId])
  @@index([disputeId])
}

// إضافة نموذج طلب السحب
enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

model WithdrawalRequest {
  id              Int                @id @default(autoincrement())
  userId          Int
  amount          Decimal            @db.Decimal(10, 2)
  status          WithdrawalStatus   @default(PENDING)
  paymentMethod   String             // طريقة الدفع (زين كاش، آسيا حوالة، إلخ)
  paymentDetails  String             @db.Text  // تفاصيل الدفع (JSON)
  notes           String?            @db.Text
  adminNotes      String?            @db.Text
  transactionId   Int?               @unique
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // العلاقات
  user            User               @relation(fields: [userId], references: [id])
  transaction     Transaction?       @relation(fields: [transactionId], references: [id])

  @@index([userId])
}
